{"version":3,"sources":["components/Header.js","components/Book.js","components/Shelf.js","components/Shelves.js","BooksAPI.js","App.js","index.js"],"names":["Header","className","Book","book","changeBookShelf","style","width","height","backgroundImage","imageLinks","thumbnail","defaultValue","shelf","onChange","event","target","value","disabled","title","authors","Shelf","books","map","b","id","Shelves","currentlyReading","filter","wantToRead","read","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","App","useState","setBooks","query","setQuery","searchedBooks","setSearchedBooks","useEffect","getBooks","fetch","then","res","json","data","setMapOfIdBooks","createMapOfBooks","updatedBooks","mapOfIdBooks","has","push","method","body","JSON","stringify","BooksAPI","isMounted","maxResults","error","mergedBooks","setMergedBooks","Map","forEach","set","combinedArrays","get","path","element","to","type","placeholder","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddfc8c32.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <div className=\"list-books-title\">\n      <h1>MyReads</h1>\n    </div>\n  );\n};\nexport default Header;\n","const Book = ({ book, changeBookShelf }) => {\n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <div\n          className=\"book-cover\"\n          style={{\n            width: 128,\n            height: 193,\n            backgroundImage: `url(\"${\n              book.imageLinks ? book.imageLinks.thumbnail : null\n            }\")`,\n          }}\n        ></div>\n        <div className=\"book-shelf-changer\">\n          <select\n            defaultValue={book.shelf ? book.shelf : \"none\"}\n            onChange={(event) => {\n              changeBookShelf(book, event.target.value);\n            }}\n          >\n            <option value=\"moveto\" disabled>\n              Move to...\n            </option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">{book.title}</div>\n      <div className=\"book-authors\">\n        {book.authors ? book.authors[0] : null}\n      </div>\n    </div>\n  );\n};\nexport default Book;\n","import Book from \"./Book\";\n\nconst Shelf = ({ books, title, changeBookShelf }) => {\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">{title}</h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {books.map((b) => (\n            <li key={b.id}>\n              <Book book={b} changeBookShelf={changeBookShelf} />\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n};\nexport default Shelf;\n","import Shelf from \"./Shelf\";\n\nconst Shelves = ({ books, changeBookShelf }) => {\n  const currentlyReading = books.filter(\n    (book) => book.shelf === \"currentlyReading\"\n  );\n  const wantToRead = books.filter((book) => book.shelf === \"wantToRead\");\n  const read = books.filter((book) => book.shelf === \"read\");\n  return (\n    <div>\n      <Shelf\n        title=\"Currenlty Reading\"\n        books={currentlyReading}\n        changeBookShelf={changeBookShelf}\n      />\n      <Shelf\n        title=\"Want To Read\"\n        books={wantToRead}\n        changeBookShelf={changeBookShelf}\n      />\n      <Shelf title=\"Read\" books={read} changeBookShelf={changeBookShelf} />\n    </div>\n  );\n};\n\nexport default Shelves;\n","const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Shelves from \"./components/Shelves\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Book from \"./components/Book\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nfunction App() {\n  const [books, setBooks] = useState([]);\n\n  const [query, setQuery] = useState(\"\");\n\n  const [searchedBooks, setSearchedBooks] = useState([]);\n\n  //To get he books for main page\n  useEffect(() => {\n    // BooksAPI.getAll().then((data) => {\n    //   console.log(data);\n    //   setBooks(data);\n    // });\n    const getBooks = async () => {\n      const res = await BooksAPI.getAll();\n      setBooks(res);\n      setMapOfIdBooks(createMapOfBooks(res));\n    };\n    getBooks();\n  }, []);\n  //If I add the [], it means when the component did mount, call this function, so it runs once\n  //If I don't add the [] at all, this function will run every time I make any change or refresh\n  //If I add a specific state inside the [], so [books], the function will run every time a change happens to that state\n\n  //To update the books' shelf so they show even after refresh\n  const changeBookShelf = (book, shelf) => {\n    const updatedBooks = books.map((b) => {\n      if (b.id === book.id) {\n        book.shelf = shelf;\n      }\n      return b;\n    });\n    if (!mapOfIdBooks.has(book.id)) {\n      book.shelf = shelf;\n      updatedBooks.push(book);\n    } //This if statement makes sure that when we add a book to a shelf using the search page, it adds immediately without the need to refresh\n    setBooks(updatedBooks);\n    BooksAPI.update(book, shelf);\n  };\n\n  //To search for the correct book on the search page\n  useEffect(() => {\n    //When I type in the search bar, every letter I type it makes change to query state, so this function will run and it will get a data, but each data I get with each entry don't get cleaned, so if I seach for \"pro\", the page will show the books/data for \"p\" and \"pr\" and \"pro\" all together\n    let isMounted = true;\n    if (query) {\n      BooksAPI.search(query).then((data) => {\n        if (data.error) {\n        } else {\n          if (isMounted) {\n            setSearchedBooks(data);\n          }\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n      setSearchedBooks([]);\n    }; //When we add a function to the return of useEffect, it will run when the component is unmounted\n  }, [query]);\n  //This means this will run only when query changes\n\n  //The logic for making the books that shows on search page have the correct shelf if they are already in one of the shelves\n  const [mergedBooks, setMergedBooks] = useState([]);\n  const [mapOfIdBooks, setMapOfIdBooks] = useState(new Map());\n\n  const createMapOfBooks = (books) => {\n    const map = new Map();\n    books.forEach((book) => map.set(book.id, book));\n    return map;\n  };\n  useEffect(() => {\n    const combinedArrays = searchedBooks.map((book) => {\n      if (mapOfIdBooks.has(book.id)) {\n        return mapOfIdBooks.get(book.id);\n      } else {\n        return book;\n      }\n    });\n    setMergedBooks(combinedArrays);\n  }, [searchedBooks, mapOfIdBooks]);\n\n  return (\n    <div className=\"app\">\n      <Routes>\n        {/* Search Page */}\n        <Route\n          path=\"/search\"\n          element={\n            <div className=\"search-books\">\n              <div className=\"search-books-bar\">\n                <Link to={\"/\"} className=\"close-search\">\n                  Close\n                </Link>\n                <div className=\"search-books-input-wrapper\">\n                  <input\n                    type=\"text\"\n                    value={query}\n                    onChange={(event) => setQuery(event.target.value)}\n                    placeholder=\"Search by title, author, or ISBN\"\n                  />\n                </div>\n              </div>\n              <div className=\"search-books-results\">\n                <ol className=\"books-grid\">\n                  {mergedBooks.map((b) => (\n                    <li key={b.id}>\n                      <Book book={b} changeBookShelf={changeBookShelf} />\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            </div>\n          }\n        />\n\n        {/* Main Page */}\n        <Route\n          exact\n          path=\"/\"\n          element={\n            <div className=\"list-books\">\n              <Header />\n              <div className=\"list-books-content\">\n                <Shelves books={books} changeBookShelf={changeBookShelf} />\n              </div>\n              <div className=\"open-search\">\n                <Link to={\"/search\"}>Add a book</Link>\n              </div>\n            </div>\n          }\n        />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}